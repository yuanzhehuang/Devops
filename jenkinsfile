pipeline {
    agent any
    environment {
        PATH=sh(script:"echo $PATH:/usr/local/bin", returnStdout:true).trim()
        AWS_REGION = "us-east-1"
        AWS_ACCOUNT_ID=sh(script:'export PATH="$PATH:/usr/local/bin" && aws sts get-caller-identity --query Account --output text', returnStdout:true).trim()
        ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        APP_REPO_NAME = "ecr-repo/todo-app"
        APP_NAME = "todo"
        HOME_FOLDER = "/home/ec2-user"
        GIT_FOLDER = sh(script:'echo ${GIT_URL} | sed "s/.*\\///;s/.git$//"', returnStdout:true).trim()
        SKIP_STAGE = 'true'
    }

    stages {
        stage('Build Infrastructure for App') {
            steps {
                sh 'terraform init'
                sh 'terraform apply --auto-approve'
            }
        }
        stage('Create ECR Repository') {
            steps {
                sh """aws ecr create-repository \
                --repository-name $APP_REPO_NAME \
                --region $AWS_REGION"""
            }
        }
        stage('Build App Docker Images') {
            steps {
                script{
                sh """docker login -u AWS -p \$(aws ecr get-login-password --region $AWS_REGION) $ECR_REGISTRY"""
                env.POSGRES_IP = sh(script: 'terraform output -raw postgre_private_ip', returnStdout: true).trim()
                sh 'envsubst < node-env-template.env > ./nodejs/server/.env'
                sh 'cat ./nodejs/server/.env'
                env.NODE_IP = sh(script: 'terraform output -raw node_public_ip', returnStdout: true).trim()
                sh 'envsubst < react-env-template.env > ./react/client/.env'
                sh 'cat ./react/client/.env'
                sh 'docker build -t postgres-app ./postgresql'
                sh 'docker build -t nodejs-app ./nodejs/server'
                sh 'docker build -t react-app ./react/client'
                }
            }
        }
        stage('Push App Docker Images to ECR Repo') {
            steps {
                sh """docker tag nodejs-app $ECR_REGISTRY/$APP_REPO_NAME:nodejs-app"""
                sh """docker push $ECR_REGISTRY/$APP_REPO_NAME:nodejs-app"""

                sh """docker tag postgres-app $ECR_REGISTRY/$APP_REPO_NAME:postgres-app"""
                sh """docker push $ECR_REGISTRY/$APP_REPO_NAME:postgres-app"""

                sh """docker tag react-app $ECR_REGISTRY/$APP_REPO_NAME:react-app"""
                sh """docker push $ECR_REGISTRY/$APP_REPO_NAME:react-app"""
            }
        }
        stage('Wait for instances') {
            steps {
                script{
                id = sh(script: 'aws ec2 describe-instances --filters Name=tag-value,Values=ansible_postgresql Name=instance-state-name,Values=running --query Reservations[*].Instances[*].[InstanceId] --output text',  returnStdout:true).trim()
                sh "aws ec2 wait instance-running --instance-ids $id"
                }
            }
        }
        stage('Deploy App') {
            steps {
                sh 'chmod 0600 son.pem'
                sh 'ansible-playbook --private-key=son.pem docker_project.yml'
            }
        }
    }
}